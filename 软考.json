{
  "CPU":"Central Processing Unit",
  "CPU中的寄存器":"
  通用寄存器，暂存运算器需要的数据或运算结果，
  地址寄存器，访问内存时的地址，
  数据寄存器，访问内存时的数据暂存，
  指令寄存器，暂存正在执行的指令，
  程序计数器，存放待执行的指令的地址
  ",
  "指令系统":"指令系统是计算机硬件的语言系统，也叫机器语言，指的是机器所具有的全部指令
  的集合。一条指令就是机器语言的一个语句，他是一组有意义的二进制代码，指令的基本格式如：
  操作码字段+地址码字段，其中操作码指明了指令的操作性质及功能，地址码则给出了操作数或操
  作数的地址",
  "寻址方式":"根据指令内容确定操作数地址的过程称为寻址。
  1. 直接寻址，指令地址域中表示的是操作数地址，
  2. 间接寻址，指令地址域中表示的是操作数地址的地址，
  3. 立即寻址，指令地址域中表示的是操作数本身（立即数寻址），
  4. 变址寻址，指令地址域中表示的是变址寄存器号和位移值D（寄存器寻址），
  5. 相对寻址，指令地址域中表示的是位移值D，
  立即数寻址和寄存器寻址在效率上是最快的",
  "总线结构":"总线（Bus）是计算机各种功能部件之间传送信息的公共通信干线，它是由导线组成
  的传输线束，计算机的总线可以划分为数据总线、地址总线和控制总线，分别用来传输数据、数据
  地址和控制信号。
  采用总线结构主要有以下优点：
  简化系统结构，便于系统设计制造
  减少了连接线数目，便于布线，减小体积，提高系统的可靠性，
  便于接口设计，所有与总线连接的设备均采用类似的接口，
  便于系统的扩充、更新与灵活配置，易于实现系统的模块化
  便于设备的软件设计
  便于故障诊断和维修
  一个16位宽度的地址总线可以到达2的16次方即64kb的内存地址，一个32位地址总线可以寻址到2的
  32次方也就是4GB的内存地址
  数据总线的位宽与字长相同
  ",
  "原码、反码、补码":"
  三种表示方法均有符号位和数值位两部分，符号位都是用0表示正，1表示负，而对于数值位三种表
  示方法各不相同。
  数值一律用补码来表示和存储，原因在于使用补码可以将符号位和数值域统一处理，同时加法和减
  法也可以统一处理
  正整数的补码是其二进制表示
  负整数的补码，将其对应的正数二进制表示所有位取反然后加一，可表示的数据范围为-128-127。
  ",
  "可靠度":"
  可靠度描述了产品在（0，t）的时间内完好的概率，
  ",
  "数字证书":"数字证书是由权威机构--CA证书授权（Certificate Authority）中心发行的，能
  提供在Internet上进行身份验证的一种权威性电子文档，人们可以在互联网交往中用它来证明自己
  的身份和识别对方的身份。
  数字证书包含版本、序列号、签名算法标识符、签发人姓名、有效期、主体名、主体公钥信息等并
  附有CA的签名，用户A获取用户B的数字证书后通过验证CA的签名来确认数字证书的有效性，验证CA
  的签名时使用的是CA的公钥",
  "宏病毒":"病毒文件名称一般分为三部分，第一部分表示病毒的类型，
  Worm，表示蠕虫病毒
  Trojan，表示特洛伊木马
  Backdoor，表示后门病毒
  Macro，表示宏病毒
  宏病毒感染的对象是使用某些程序创建的文本文档、数据库、电子表格等文件",
  "网络攻击的主要手段":"
  口令入侵，使用某些合法用户的账号和口令登录到目的主机，然后在实施攻击活动
  特洛伊木马，伪装成工具程序或游戏，一旦用户打开了带有特洛伊木马程序的邮件附件，当用户连接
  到互联网上时，这个程序就会向黑客通知用户的IP地址以及预先设定的端口
  拒绝服务，是计算机或者网络无法提供正常的服务。最常见的拒绝服务攻击有网络带宽攻击和连通性
  攻击。
  端口扫描就是利用Socket编程与目标主机的某些端口建立TCP连接、进行传输协议的验证等，从而侦
  知目标主机的扫描端口是否处于激活状态
  网络监听是主机的一种工作模式，可以接收到本网段在同一条物理通道上传输的所有信息。
  欺骗攻击是攻击者创造一个易于误解的上下文环境，以诱使受攻击者进入并且做出缺乏安全考虑的决策
  IP欺骗是欺骗攻击的一种，ARP攻击也是欺骗攻击的一种，通过伪造IP地址和MAC地址，能够在网络中
  产生大量的ARP通信量使网络阻塞
  ",
  "软件著作权的翻译权":"将原软件从一种程序语言转换成另一种程序语言的权利",
  "软件的各种权利":"
  著作权，从软件作品性的角度保护其表现形式，源代码，目标代码，软件文档是计算机软件的基本表达
  方式，受著作权保护
  专利权，从软件功能性的角度保护软件的思想内涵，即软件的技术构思、程序的逻辑和算法等的思想
  内涵
  商标权，为商业化的软件从商品、商誉的角度为软件提供保护，利用商标权可以禁止他人使用相同或者
  相似的商标、生产（制作）或销售假冒软件产品。
  ",
  "商业秘密的构成条件":"
  未公开性，不为公众所知悉
  实用性，能为权利人带来经济效益
  保密性，采取了保密措施",
  "编码方法":"
  哈夫编码，是一种一致性编码法（又称熵编码法），用于数据的无损耗压缩，它根据每一个源字符
  出现的估算概率建立起来，出现概率高的字符使用较短的编码，出现概率低的使用较长的编码，这
  使得编码之后的字符串的平均期望长度降低，从而达到无损压缩数据的目的
  小波变换编码
  线性预测编码
  行程编码",
  "CIF视频格式":"Common Intermediate Format，在H.323协议族中规定了标准采集分辨率，
  352X288像素",
  "MPEG":"MPEG-7称为多媒体内容描述接口（multimedia content description interface），
  该标准是建立对多媒体内容的描述标准",
  "耦合类型":"耦合是模块之间的相对独立性的度量，模块之间的链接越紧密，联系越多，耦合性就
  越高，而其模块独立性就越弱，耦合性从低到高
  非直接耦合
  数据耦合，模块之间通过数据参数（不是控制参数、公共数据结构或外部变量）来交换输入、输出
  信息。
  标记耦合，通过数据结构本身传递的耦合方式
  控制耦合
  外部耦合
  公共耦合，均访问同一个公共数据环境
  内容耦合，一个模块直接访问另一个模块的内部数据、一个模块不通过正常入口转到另一个模块内
  部、两个模块有一部分程序代码重叠或者一个模块有多个入口",
  "项目估算方法":"
  专家判断方法
  启发式方法
  ",
  "逆波兰式":"reverse polish notation，也叫后缀表达式，是将运算符写在操作数之后的表达
  式表示方法，对逆波兰式进行求值的方法是：从左至右的扫描表达式，遇到操作数则压栈，遇到运
  算符号则从栈中弹出操作数进行运算，然后将运算结果压入栈中，重复该过程直到表达式结束，最
  后的结果为栈顶元素",
  "系统字长":"32位系统字长可以记录32个物理块的使用情况",
  "操作系统存储管理":"置换页面的原则如下表，先置换访问位和修改位为00的页，在置换01的页，
  然后是10的页，最后置换11的页",
  "软件过程模型":"
  瀑布模型，从一种非常高层的角度描述了软件开发过程进行的活动，并且提出了要求开发人员经过
  的事件序列，该模型适用于项目开始时需求已确定的情况
  V模型是瀑布模型的变种，它说明测试活动是如何与分析和设计相联系的。
  原型模型，允许开发人员快速地构造整个系统或系统的一部分以理解或澄清问题，原型的用途是获
  知用户的真正需求，因此原型模型可以有效地引发系统需求。
  螺旋模型把开发活动和风险管理结合起来，已将风险减到最小并控制风险。",
  "文档":"文档是指某种数据媒体和其中所记录的数据。高质量的文档应该体现在几个方面
  针对性
  精确性
  清晰性
  完整性
  灵活性
  可追溯性",
  "软件运行与维护":"
  改正性维护，为了识别和纠正软件错误、改正软件性能上的缺陷、排除实施中的误使用，应进行的
  诊断和改正错误的过程
  适应性维护，由于信息技术飞速发展，软件运行的外部环境或数据环境可能会发生变化，为了使软
  件适应这种变化，而修改软件的过程
  完善性维护，在软件使用过程中，用户往往会对软件提出新的功能与性能要求，为了满足这些要求，
  需要修改或再开发软件，以扩充软件功能、增强软件性能、改进加工效率、提高软件的可维护性
  预防性维护，为了提高软件的可维护性和可靠性等，为以后进一步改进软件打下良好的基础而进行
  的维护工作。
  ",
  "软件检查方式":"
  功能测试，检查软件是否能实现需求中指定的那些功能
  性能测试，测试软件的安全性、精确性、速度和可靠性
  回归测试，识别在改正当前故障的同事可能会引入新的故障
  验收测试，客户对系统进行测试以验证软件系统是否符合他们对需求的理解
  ",
  "面向对象分析":"
  认定对象
  组织对象
  描述对象间的相互作用
  定义对象的操作
  定义对象的内部信息
  ",
  "类的静态成员":"
  静态成员的含义是所修饰的成员是属于类的，而不是属于某对象的。静态数据成员对该类只有一份，
  该类的所有对象共享静态数据成员，可被该类的所有方法访问，其值可以修改，但是不论是通过对
  象还是类对静态数据成员值的修改，都会反映到整个类。类的静态方法只能访问到该类的静态数据
  成员
  ",
  "类(class)和对象(object)和实例(instance)":"
  类和对象是两种以计算机为载体的计算机语言的合称。对象是对客观事物的抽象，类是对对象的
  抽象。类是一种抽象的数据类型。
  ",
  "统一建模语言":"Unified Modeling Language, UML, 通常是用一组视图反应系统的各个方面，
  以完整地描述系统，每个视图代表系统描述中的一个抽象，显示系统中的一个特定的方面。
  类图，展现了一组对象、接口、协作和它们之间的关系，可以展现类之间的关联关系，还可以图示多重度
  对象图，展现了一组对象以及其之间的关系，描述了在类图中所建立的事物的实例的静态快照
  序列图，是场景的图形化表示，描述了以时间顺序组织的对象之间的交互活动
  通信图，强调收发消息的对象的结构组织
  状态图，展现了一个状态机，由状态、转换、事件和活动组成，它关注的是系统的动态视图
  活动图，是一种特殊的状态图，展现了在系统内从一个活动到另一个活动的流程
  序列图、通信图、交互图和定时图被称为交互图，它们用于对系统的动态方面进行建模
  ",
  "多重度":"表示有多少个实例能被连接起来，即一个类的实例能够与另一个类的多少个实例相关联",
  "面向对象软件开发过程中的设计模式":"以复用成功的设计",
  "设计模式":"
  Bridge（桥接）模式将对象的抽象和其实现分离，从而可以独立地改变它们
  Composite（组合）模式是结构型对象模式的一个实例，他描述了如何构造一个类层次式结构
  Facade（外观）模式则描述了如何用单个对象表示整个子系统
  Singleton（单例）模式保证一个类只产生唯一的一个实例
  Adapter模式是将类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起
  工作的那些类可以一起工作
  Command模式将请求封装在对象中，这样它就可作为参数来传递，也可以被存储在历史列表里
  Strategy（策略模式）定义一系列的算法，把他们一个个封装起来，并使它们可以相互替换，这
  一模式使得算法可以独立于使用它的客户而变化
  ",
  "高级语言程序翻译":"
  词法分析
  语法分析
  语义分析
  中间代码生成
  代码优化
  目标代码生成
  程序中的错误分为语法错误和语义错误
  目标代码生成阶段的工作与目标机器的体系结构是密切相关的
  ",
  "类图":"
  一般化关系，表示类与类之间的继承关系，接口与接口之间的集成，类对接口的实现关系，
  一个空心箭头+实线，箭头指向父类或空心箭头+虚线
  关联关系，一个类知道另一个类的属性和方法
  实线+箭头，箭头指向被使用的类
  聚合关系，属于强的关联关系，聚合关系的两个类处于不同的层次，一个是整体，一个是部分，
  空心菱形+实线+箭头，箭头指向个体
  合成关系，聚合关系的一种，要求整体的对象负责代表部分的对象的生命周期
  实心菱形+实线+箭头
  依赖关系，表示一个类依赖于另一个类的定义，如果A依赖于B，则B体现为局部变量
  虚线+箭头，箭头指向被依赖的一方
  ",
  "信息传递方式":"
  传值调用，是将实参的值传给被调用函数的形参
  引用调用（传地址），将实参的地址传给被调用函数的形参
  ",
  "形参与实参":"
  形参变量只有在被调用是才分配内存单元，在调用结束时，就会释放出所分配的内存，所以形参只
  能在函数内部才有效
  实参是：常量、变量、表达式、函数等
  ",
  "主键":"
  primary key，它的值用于唯一地标识表中的某一条记录，一个表的主键可以由多个关键字共同组成，并
  且主关键字的列不能包含空值。",
  "超关键字":"
  是指一个或多个属性的集合，这个属性的组合可以使我们在一个实体集中唯一地标识一个实体
  ",
  "候选关键字":"
  如果一个超关键字去掉其中任何一个字段后不再能唯一地确定记录，则称它为“候选关键字”，
  Candidate Key，候选关键字是最简单的超关键字
  ",
  "关系模式":"
  关系的描述称为关系模式（Relation Schema），它可以形式化地表示为：
  R（U，D，dom，F）
  其中R为关系名，U为组成该关系的属性名集合，D为属性组U中属性所来自的域，dom为属性向域的
  映像集合，F为属性间数据的依赖关系集合
  通常简记为R（U）或R（A1，A2，。。。，An）
  R为关系名，U为属性名集合，A1，A2，。。。，An为各属性名
  ",
  "二叉树":"
  线索二叉树，与二叉树的遍历运算相关，是一种存储结构
  二叉排序树，与给定的初始关键码序列相关
  最优二叉树（哈夫曼树），是一类带权路径长度最短的二叉树，由给定的一个权值序列构造
  完全二叉树，去掉最后一层后就是满二叉树，而且最后一层上的叶子节点必须从该层的最左边开始
  排列，满足任意一个节点的左、右子树的高度之差的绝对值不超过1的条件，因此在形态上是一个平
  衡的二叉树
  平衡二叉树，任意一个节点的左右子树的高度之差的绝对值不超过1
  满二叉树，除最后一层无任何子节点外，每一层上的所有节点都有两个子节点二叉树
  ",
  "简单图和多重图":"
  无向图，关联一对顶点的无向边如果多于1条，则称这些边为平行边，平行边的条数称为重数。
  有向图，关联一对顶点的有向边如果多于1条，并且这些边的始点和终点相同（也就是它们的方向相同），
  称这些边为平行边。
  含平行边的图称为多重图，既不含平行边也不含环的图称为简单图。
  ",
  "邻接矩阵":"
  逻辑结构分为两部分，V和E集合，因此用一个一维数组存放图中所有顶点数据，用一个二维数组存放
  顶点间关系的数据，这个二维数组称为邻接矩阵，邻接矩阵又分为有向图邻接矩阵和无向图邻接矩阵
  1. 对无向图而言，邻接矩阵一定是对称的，而且主对角线一定为零，副对角线不一定为零
  2. 用邻接矩阵法表示图共需要n^2个空间，由于无向图的邻接矩阵一定具有对称关系，所以扣除对角
  线为零外，仅需要存储上三角形或下三角形的数据即可，因此仅需要n(n-1)/2个空间
  ",
  "计算问题方法":"
  分治法：分，将问题分解为规模更小的子问题；治，将这些规模更小的子问题逐个击破；合，将已
  解决的子问题合并，最终得出“母”问题的解；
  动态规划法：动态规划算法的基本思想与分治法类似，也是将待求解的问题分解为若干个子问题，
  按顺序求解子阶段，前一子问题的解为后一子问题的求解提供了有用的信息。在求解任一子问题时，
  列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解，依次解决
  各子问题，最后一个子问题就是初始问题的解。
  回溯法，回溯法是一种选优搜索法，又称为试探法，按优选条件向前搜索，已达到目标，但当探索到
  某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术
  为回溯法，而满足回溯条件的某个状态的点称为回溯点。
  ",
  "插入排序与归并排序":"
  插入排序：每步将一个待排序的记录，按其关键码值的大小插入前面已经排序的文件中适当位置上，
  直到全部插入完为止
  归并排序：是建立在归并操作上的一种有效地排序算法，该算法是采用分治法的一个非常典型的应
  用，将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。
  ",
  "ARP":"
  Address Resolution Protocol,地址分解协议，在Internet中用ARP来实现逻辑地址到物理地址
  映像，属于网络层协议，负责将物理地址与逻辑地址对应起来。
  ",
  "物理地址与逻辑地址":"
  IP地址是分配给主机的逻辑地址，在互联网中表示唯一的主机。另外，每个主机还有一个物理地址，
  通常用网卡地址（MAC地址）来表示主机的物理地址。
  从网络连接的角度看，逻辑地址在整个互联网络中有效，而物理地址只是在子网内部有效；从网络
  协议分层的角度看，逻辑地址由Internet层使用，而物理地址由子网访问子层（具体地说就是数据
  链路层）使用。
  ",
  "集线器与交换机":"
  集线器是一种物理层设备，它的作用是从一个端口接收信息，并向其他端口广播出去，集线器不解释
  所传送信息的含义，也不能识别任何协议数据单元。集线器的各个端口构成一个冲突域，即只能有一个
  端口发送数据，如果有两个以上端口同时发送，就冲突了。
  网桥是数据链路层设备，能识别数据链路层协议数据单元，并根据数据链路层地址进行转发
  交换机是一种多端口网桥，任何一对端口之间都能进行数据转发，交换机的各个端口构成一个广播域，
  但不是冲突域，即可以有多个端口同时发送数据而不会出现冲突。
  ",
  "三网合一":"
  电信网
  广播电视网
  互联网
  ",
  "IP地址分类":"
  每个IP地址包括两个标识码（ID），即网络ID和主机ID
  A，四段号码中，第一段号码为网络号码，剩下的三段号码为本地计算机的号码，网络地址的最高位
  必须是0，网络表示长度8位，主机标识长度24位，0.0.0.0-127.255.255.255
  B，前两段号码为网络号码，网络地址的最高位必须是10，128.0.0.0-191.255.255.255
  C，前三段号码为网络号码，剩下的一段号码为本地计算机的号码，网络地址的最高位必须是110，
  192.0.0.0-223.255.255.255,
  ",
  "数据流图":"
  Data Flow Diagram， 简称DFD，是结构化系统分析方法的主要表达工具及用于表示软件模型的一
  种图示方法。
  数据流，流动中的数据，必须有流向",
  "数据流图的组成":
  "
  数据源或宿（“宿”表示数据的终点），代表系统之外的实体，可以是人、物或其他软件系统
  对数据的加工（处理），加工时对数据进行处理的单元，它接受一定的数据输入，对其进行处理，
  并产生输出
  数据存储，表示信息的静态存储，可以代表文件、文件的一部分、数据库的元素等
  ",
  "数据流图的原则":"
  一个加工的输出数据流不应与输入数据流同名，即使它们的组成成分相同
  保持数据守恒，也就是说一个加工所有输出数据流中的数据必须能从该加工的输入数据流中直接获得
  或者说是通过改价功能产生的数据
  每个加工必须既有输入数据流，又有输出数据流
  所有的数据流必须以一个外部实体开始，并以一个外部实体结束
  外部实体之间不应该存在数据流
  ",
  "输入输出控制方法":"
  程序控制方式，由CPU执行程序控制数据的输入输出过程
  中断方式，外设准备好输入数据或接收数据时向CPU发出中断请求信号，若CPU决定响应该请求，则
  暂停正在执行的任务，转而执行中断服务程序进行数据的输入输出处理，之后再回去执行原来被中断
  的任务
  DMA，Direct Memory Access，直接内存存取，它允许不同速度的硬件装置来沟通，而不需要依赖
  于CPU的大量中断负载，CPU只需向DMA控制器下达指令，让DMA控制器来处理数据的传送，数据传送
  完毕再把信息反馈给CPU
  "

}
